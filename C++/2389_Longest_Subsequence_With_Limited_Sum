class Solution {

    //Search function, which uses binary search to find the maximum sum which is less than or equal to the given value
    int search(int a, vector<int>& v)
    {
        int l=0, r=v.size()-1;
        int pos=-1;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(v[mid]==a) return mid;
            else if(v[mid]<a) 
            {
                pos=mid;
                l=mid+1;
            }
            else r=mid-1;
        }

        return pos;
    }
public:
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        //Since we need to find subsequence, hence order doesn't matter. So, we can sort the array.
        sort(nums.begin(), nums.end());

        //Now, we are calculating it's prefix sum as it will give us the longest subsequence for given sum
        for(int i=1;i<nums.size();i++)
        {
            nums[i]+=nums[i-1];
        }

        //For each query, log(n) time will be taken, so overall complexity is O(mlogn) 
        vector<int> res;
        for(auto a : queries)
        {
            int ans=search(a, nums)+1;
            res.push_back(ans);
        }
        return res;
    }
};
